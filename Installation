With reference to https://cuckoo.readthedocs.io/en/latest/installation/ (Cuckoo Sandbox documentation v: 2.0.7),
it is recommended to deploy Cuckoo in a GNU/Linux machine, preferably Debian or Ubuntu, as a virtual machine host or a physical host.
(Though it works with other OS as well)

Guest Machines are used within the host machine as testing/analysis setups.
For Windows analysis, the recommended OS releases are Windows XP and Windows 7 64-bit.
A virtualization sofotware is required for the deployment of the guest virtual machines

For the full setup of the Cuckoo Sandbox environment and with the scope of the project in mind, we will be using:
1. VMware Workstation Pro 16.2.3 to deploy a Ubuntu 18.04 virtual machine host
(Ubuntu 20.04 and under works as well, reasons will be explained later on in the guide)
2. Oracle VM VirtualBox as to deploy our Guest virtual machine (acts as a sandbox) for dynamic analysis with Cuckoo
3. Windows 7 SP1 64-bit as the guest Operating System for the execution of malware to be analysed by Cuckoo


For hypervisors ==> Ensure that The Virtual Machine has the VT-x capability enabled. 
(To enable nested virtualization within the Ubuntu Linux Virtual Machine, 
since we are using Ubuntu as a virtual machine host)

UBUNTU VIRTUAL MACHINE HOST SETUP:
Hypervisor ==> VMware Workstation Pro 16.2.3
Virtual Machine ==> Ubuntu 18.04.06
Storage/Hard Drive Space ==> 200> 
(Recommeded since we will be performing nested virtualisation with Windows 7 VM using virtualbox, 
 ensure sufficient storage reosurces for both the VM host and VM guest)
RAM ==> 4> 
(Again, Windows 7 VM requires 4 or more GB of RAM to avoid detection by malware, 
 ensure enough for both Ubuntu Host and VM to function properly)
 
Once done the VM setup is completed, log in to the VM.

Launch the terminal and type the following commands.
$ sudo apt-get update && sudo apt-get upgrade (Update the Ubuntu Packages)
* If you are using a Hypervisor, you might want to create a snapshot as acting as a Base Image 
after the packages has been upgraded.

CUCKOO SANDBOX INSTALLATION & SETUP

Cuckoo components are written entirely in Python, and as of now Cuckoo only fully supports python2.7, hence Python2.7 is needed to be installed on the VM
as the main python version
Cuckoo also requires other software packages and python dependencies to install & function properly

In a new terminal:
sudo apt-get install curl

curl https://bootstrap.pypa.io/pip/2.7/get-pip.py -o get-pip.py

sudo apt-get install python

sudo python get-pip.py

sudo apt-get install python-dev libffi-dev libssl-dev git
sudo apt-get install python-setuptools
sudo apt-get install libjpeg-dev zlib1g-dev swig

sudo apt-get install -y mongodb (Use the Django-based Web Interface for Cuckoo)

sudo apt-get install -y virtualbox
(Cuckoo supports VirtualBox 4.3, 5.0, 5.1, and 5.2, Ubuntu 20.04 and below support these versions)

Ensure that the same user is used to run Cuckoo and to create and run the VirtualBox VMs 
(Otherwise Cuckoo won’t be able to identify and launch these Virtual Machines)


INSTALLING THE Volatility PLUGIN: (To perform memory dumps on the analysis VM)

cd Downloads/

~/Downloads

git clone https://github.com/volatilityfoundation/volatility.git 

cd volatility

sudo python setup.py build

sudo python setup.py install

cd .. (Exit the Downloads directory)


INSTALLING THE tcpdump PLUGIN: (To perform network dumps of malware activity during its execution)

sudo apt-get install tcpdump apparmor-utils
sudo aa-disable /usr/sbin/tcpdump
sudo setcap cap_net_raw,cap_net_admin=eip /usr/sbin/tcpdump
getcap /usr/sbin/tcpdump
=> /usr/sbin/tcpdump = cap_net_admin,cap_net_raw+eip (To verify the "setcap" command)


INSTALLING THE M2Crpyto PLUGIN:

sudo apt-get install swig (SWIG is needed to be installed to support M2crypto, we have specified this in the earlier commands)

sudo pip install m2crypto


INSTALLING Cuckoo Sandbox:

pip install -U pip setuptools

sudo -H pip install -U cuckoo

cuckoo (To start the Cuckoo Sandbox)



SETTING UP VirtualBox NETWORKING

sudo apt install net-tools (Installing Networking Ultilties for Linux)

ifconfig (net-tools command to display status of the currently active interfaces)

vboxmanage hostonlyif create (Creates a "Host-Only" Adapter)

vboxmanage hostonlyif ipconfig vboxnet0 --ip 192.168.56.1 (Creates a host interface "vboxnet0")

ifconfig (Check that the hostonly interface has been enabled)

Since the host-only interface is only persistent until the next reboot
sudo mkdir /opt/systemd/

sudo nano /opt/systemd/vboxhostonly





WINDOWS 7 GUEST MACHINE SETUP:
Since we are running VirtualBox within our VMware Virtual Machine, 
we need to ensure that VirtualBox is capable of nested virtualization as well.

Run the command:
VBoxManage modifyvm cuckoo1 --nested-hw-virt on (Enable VirtualBox nested virtualization)

VM Name: cuckoo1
RAM Size: 4GB >
Disk Size: 80GB >
ISO File: Windows 7 SP1 (https://cuckoo.sh/win7ultimate.iso)

Start the VM and install it.

CONFIGURING THE GUEST MACHINE:
We msut first configure the Windows 7 VM Network Adapter

IP Address — 192.168.56.101 (VM IP address)
Subnet Mask — 255.255.255.0
Default Gateway — 192.168.56.1 (interface for Internet Access)
DNS Servers — 8.8.8.8/8.8.4.4


Once installed, search for Edit Group Policy in the Windows search box.

There should be two configuration types under "Local Computer Policy"

From there:

1.
Expand Computer Configuration:
> Windows Settings > Security Settings > Local Policies > Security Options. Search for User Account Control options

“User Account Control: Behavior of the elevation prompt for administrators in Admin Approval Mode”: Elevate without prompting

User Account Control: Detect application installations and prompt for elevation”: Disabled

User Account Control: Run all administrators in Admin Approval Mode”: Disabled

2. 
Computer Configuration 
> Administrative Templates > Windows Components > Windows Update > Configure Automatic Updates

Select Enabled, 2- Notify for download and notify for install, then click ok

3.Computer Configuration > Administrative Templates > Network > Network connections > Windows Firewall > Domain Profile > Windows Firewall and change “Protect all network connections” ==> Disabled.

4.Computer Configuration > Administrative Templates > Windows Components > Windows Defender Antivirus then set “Turn off Windows Defender Antivirus” ==> Enabled

Ensure that 


SETTING UP THE GUEST MACHINE:

To ensure that Cuckoo functions properly in the virtual guest machine, several software and libraries are required to be installed.

Again, Python (version 2.7 is preferred) is a requirement for the Cuckoo guest component to run and analyse samples properly.

From the two links, download the installer (in the Ubuntu VM) for the Python libraries.
https://www.python.org/ftp/python/2.7.8/python-2.7.8.amd64.msi 
https://pypi.python.org/packages/2.7/P/Pillow/Pillow-2.5.3.win-amd64-py2.7.exe#md5=33c3a581ff1538b4f79b4651084090c8 



CONFIGURING CUCKOO

cd ~/.cuckoo/conf

sudo nano cuckoo.conf => Cuckoo Configuration File
machinery = virtualbox  => Set Cuckoo to use virtualbox as the virtualization software
memory_dump = yes => Since the Volatility plugin has been installed, it can be used to perform memory dumps of the guest machine)
ip = 192.168.56.1 => Set the IP addresses of the guest machine for Cuckoo to communicate with.
then Ctrl + X to exit , Y to save

sudo nano auxiliary.conf
sniffer enabled = yes
then Ctrl + X to exit , Y to save 

sudo nano virtualbox.conf
virtualbox mode = gui
machines = cuckoo1
optional = label = cuckoo1 and platform = windows
ip = 192.168.56.101
snapshot = Snapshot1
Then Ctrl + X to exit , Y to save

sudo nano processing.conf
memory enabled = yes then Ctrl + X to exit , Y to save

sudo nano memory.conf
basic guest_profile = Win7SP1x64 
then Ctrl + X to exit , Y to save 

If you are unsure of the Oerating system profile to use, you can get a full list of the supported profiles by running:

vol.py --info |grep Profiles -A48


sudo nano reporting.conf
enabled = yes
Report.html enabled = yes 
mongodb enabled = yes 
then Ctrl + X to exit , Y to save


Once all configurations has been made, ensure that Windows 7 Guest machine is shutdown and reboot the Ubuntu Virtual Machine host

In a new terminal, ensure that the latest Cuckoo signatures and other supplies are downloaded from the 
Cuckoo Community, run the command:

cuckoo community 




Launch two terminals 
The first terminal will be used to run and start Cuckoo

cuckoo

In the second terminal type the following to start the web server for the Cuckoo web interface


cuckoo web runserver 0.0.0.0:8080 
OR
cuckoo web --host 127.0.0.1 --port 8080

visit the Cuckoo Web Server via 127.0.0.1:8000 
