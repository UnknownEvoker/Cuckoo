PREREQUISITES:
With reference to https://cuckoo.readthedocs.io/en/latest/installation/ (Cuckoo Sandbox documentation v: 2.0.7),
it is recommended to deploy Cuckoo in a GNU/Linux machine, preferably Debian or Ubuntu, as a virtual machine host or a physical host.
(Though it works with other OS as well)

Guest Machines are used within the host machine as testing/analysis setups.
For Windows analysis, the recommended OS releases are Windows XP and Windows 7 64-bit.
A virtualization sofotware is required for the deployment of the guest virtual machines

For the full setup of the Cuckoo Sandbox environment and with the scope of the project in mind, we will be using:
1. VMware Workstation Pro 16.2.3 to deploy a Ubuntu 18.04 virtual machine host
(Ubuntu 20.04 and under works as well, reasons will be explained later on in the guide)
2. Oracle VM VirtualBox as to deploy our Guest virtual machine (acts as a sandbox) for dynamic analysis with Cuckoo
3. Windows 7 SP1 64-bit as the guest Operating System for the execution of malware to be analysed by Cuckoo


For hypervisors ==> Ensure that The Virtual Machine has the can virtualize the VT-x capability.
(To enable nested virtualization within the Ubuntu Linux Virtual Machine, 
since we are using Ubuntu as a virtual machine host)



UBUNTU VIRTUAL MACHINE HOST SETUP:
Hypervisor ==> VMware Workstation Pro 16.2.3
Virtual Machine ==> Ubuntu 18.04.06
Storage/Hard Drive Space ==> 200> 
(Recommeded since we will be performing nested virtualisation with Windows 7 VM using virtualbox, 
 ensure sufficient storage reosurces for both the VM host and VM guest)
RAM ==> 4> 
(Again, Windows 7 VM requires 4 or more GB of RAM to avoid detection by malware, 
 ensure enough for both Ubuntu Host and VM to function properly)
 
Once done the VM setup is completed, log in to the VM.

Launch the terminal and type the following commands.
$ sudo apt-get update && sudo apt-get upgrade (Update the Ubuntu Packages)
* If you are using a Hypervisor, you might want to create a snapshot as acting as a Base Image 
after the packages has been upgraded.



CUCKOO SANDBOX INSTALLATION & SETUP
Cuckoo components are written entirely in Python, and as of now Cuckoo only fully supports python2.7, hence Python2.7 is needed to be installed on the VM
as the main python version
Cuckoo also requires other software packages and python dependencies to install & function properly

In a new terminal:
sudo apt-get install curl

curl https://bootstrap.pypa.io/pip/2.7/get-pip.py -o get-pip.py (cURL is required to install python pip2.7)

sudo apt-get install python (Installs python2.7.8)

sudo python get-pip.py

sudo apt-get install python-dev libffi-dev libssl-dev git
sudo apt-get install python-setuptools
sudo apt-get install libjpeg-dev zlib1g-dev swig

sudo apt-get install -y mongodb (Use the Django-based Web Interface for Cuckoo)

sudo apt-get install -y virtualbox
(Cuckoo supports VirtualBox 4.3, 5.0, 5.1, and 5.2, Ubuntu 20.04 and below support these versions)

Ensure that the same user is used to run Cuckoo and to create and run the VirtualBox VMs 
(Otherwise Cuckoo won’t be able to identify and launch these Virtual Machines)



INSTALLING CUCKOO MODULES (Improves processing of analysis report)
Volatility: (To perform memory dumps on the analysis VM)

cd Downloads/

~/Downloads

git clone https://github.com/volatilityfoundation/volatility.git 

cd volatility

sudo python setup.py build

sudo python setup.py install

cd ..


tcpdump: (A packet analyser/network sniffer that intercepts network traffic on the system)

sudo apt-get install tcpdump apparmor-utils
sudo aa-disable /usr/sbin/tcpdump
sudo setcap cap_net_raw,cap_net_admin=eip /usr/sbin/tcpdump
getcap /usr/sbin/tcpdump
=> /usr/sbin/tcpdump = cap_net_admin,cap_net_raw+eip (To verify the "setcap" command)


M2Crpyto:
sudo apt-get install swig (SWIG is needed to be installed to support M2crypto, we have specified this in the earlier commands)

sudo pip install m2crypto



INSTALLING Cuckoo Sandbox: (A cryptography and SSL tool kit for Python)

pip install -U pip setuptools

sudo -H pip install -U cuckoo

cuckoo (To start the Cuckoo Sandbox)



SETTING UP VirtualBox Host-Only INTERFACE
sudo apt install net-tools (Installing Networking Ultilties for Linux)

ifconfig (net-tools command to display status of the currently active interfaces)

vboxmanage hostonlyif create (Creates a "Host-Only" Adapter)

vboxmanage hostonlyif ipconfig vboxnet0 --ip 192.168.56.1 (Creates a host interface "vboxnet0")

ifconfig (Check that the hostonly interface has been enabled)

Since the host-only interface is only persistent until the next reboot, 
a simple bash script can be created for us to execute rather than typing the commands again.

sudo mkdir /opt/scripts/ (Create a directory called "scripts" in the /opt path)

sudo nano /opt/scripts/vboxhostonly_enable.sh

#!/bin/bash
vboxmanage hostonlyif ipconfig vboxnet0 --ip 192.168.56.1 

Ctrl + S to save.



DEPLOYING THE WINDOWS 7 GUEST MACHINE:

VM Name: cuckoo1
RAM Size: 4GB >
Disk Size: 80GB >
ISO File: Windows 7 SP1 (https://cuckoo.sh/win7ultimate.iso)

Since we are running VirtualBox within our VMware Virtual Machine, 
we need to ensure that VirtualBox is capable of nested virtualization as well.

Run the command:
VBoxManage modifyvm cuckoo1 --nested-hw-virt on (Enable VirtualBox nested virtualization)

Start the VM and install it.

CONFIGURING THE GUEST MACHINE:
We must first configure the Windows 7 VM Network Adapter

IP Address — 192.168.56.101 (VM IP address)
Subnet Mask — 255.255.255.0
Default Gateway — 192.168.56.1 (interface for Internet Access)
DNS Servers — 8.8.8.8/8.8.4.4


We will now make the guest machine intentionally vulnerable.
Login to the VM and search for Edit Group Policy in the Windows search box.

There should be two configuration types under "Local Computer Policy"

From there:
1.
Expand Computer Configuration:
Windows Settings > Security Settings > Local Policies > Security Options. Search for User Account Control options

“User Account Control: Behavior of the elevation prompt for administrators in Admin Approval Mode”: Elevate without prompting

"User Account Control: Detect application installations and prompt for elevation”: Disabled

"User Account Control: Run all administrators in Admin Approval Mode”: Disabled

These configurations essentially allows the guest machine to run any software and its installation
in administrator mode without the need for a approval prompt.

2. 
Computer Configuration 
Administrative Templates > Windows Components > Windows Update > Configure Automatic Updates

Select Enabled, 2- Notify for download and notify for install, then click ok

3.
Computer Configuration > Administrative Templates > Network > Network connections > Windows Firewall > Domain Profile > Windows Firewall > Set “Protect all network connections”: Disabled.

4.
Computer Configuration > Administrative Templates > Windows Components > Windows Defender Antivirus > Set “Turn off Windows Defender Antivirus”: Enabled



SETTING UP THE GUEST MACHINE:

To ensure that Cuckoo functions properly in the virtual guest machine, several software and libraries are required to be installed.

Again, Python (version 2.7 is preferred) is a requirement for the Cuckoo guest component to run and analyse samples properly.

From the two links, download the installer (in the Ubuntu VM) for Python2.7
https://www.python.org/ftp/python/2.7.8/python-2.7.8.amd64.msi 
& Python Pillow
https://www.python.org/ftp/python/2.7.8/python-2.7.8.msi
https://pypi.python.org/packages/2.7/P/Pillow/Pillow-2.9.0.win32-py2.7.exe

Python Pillow: Used for taking screenshots of the Windows desktop during the analysis. Can be seen when using the Cuckoo web interface.

*NOTE: Python2.7 64-bit seems to cause some issues with the bahavioural analysis on Cuckoo.
Switching to Python2.7 32-bit seems to fix this issue. Is likely due to the Cuckoo agent.py not working with 64-bit.

Drag & Drop the two installer files from the Ubuntu VM to the Windows 7 VirtualBox VM

(Inside the VM, under Devices > Drag & Drop, 
ensure that it is set to "Host to Guest" to allow file transfers from the Host to the Guest Machine)

Install two Python programs in the Guest VM.

Cuckoo requires a custom agent capable of cross-platforming to be installed within the Guest machine to handle communication 
and the exchange of data with the Ubuntu virtual machine host.

The agent.py file is located in the ~/.cuckoo/agent ($CWD/agent/) directory. It can be installed on the guest by
copying it from the this directory to the guest machine.

The Cuckoo Agent is a script that will spawn a Python Window and 
launch a small API server that the host will be able to talk to.

We want to ensure that this agent will launch at Windows boot. Is is done by placing the agent.py file
in the Startup folder:
C:\Users\<Windows_User>\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup

*To see the AppData folder in the C: Drive, File Explorer > View > Ensure Hidden Items is checked.

*NOTE: If are not able to Drag & Drop or Copy the files from the Ubuntu VM host to the VirtualBox Guest VM,
you'll need to install VirtualBox GuestAddtions.
If it still does not work, create a Shared folder between the Ubuntu VM host and the Guest VM

Reboot the Guest VM and you should see a Windows terminal opened. 
This means the Cuckoo agent is running.
*If there is a Windows Firewall prompt blocking the python agent, just select "Allow Access"

On VirtualBox, select cuckoo1 > Settings > Network > Adapter 1 > Change "Attached to": Host-Only Adapter > Name: vboxnet0

Create a snapshot of the Guest VM:
3 dots > Snapshots > Take > Snapshot Name: Snapshot1



SETUP iptables for "Simple Global Routing"
(Sets up iptable rules for "Simple Global Routing", to allow VM access to both Cuckoo and the Internet)
As iptables is not persistent, we are creating another bash script in "/opt/scripts/" to set the rules quickly

sudo gedit /opt/scripts/ip_forward.sh

#!/bin/bash
sudo iptables -t nat -A POSTROUTING -o ens33 -s 192.168.56.0/24 -j MASQUERADE (Note that the network interface specifed may differ from your setup)

sudo iptables -P FORWARD DROP

sudo iptables -A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT

sudo iptables -A FORWARD -s 192.168.56.0/24 -j ACCEPT

sudo iptables -A FORWARD -s 192.168.56.0/24 -d 192.168.56.0/24 -j ACCEPT

sudo iptables -A FORWARD -j LOG

echo 1 | sudo tee -a /proc/sys/net/ipv4/ip_forward (We have to enable IP forwarding in the kernel for packet forwarding.)
sudo sysctl -w net.ipv4.ip_forward=1

Ctrl + S to save



CONFIGURING CUCKOO

cd ~/.cuckoo/conf

sudo gedit cuckoo.conf => Cuckoo Configuration File
machinery = virtualbox  => Set Cuckoo to use virtualbox as the virtualization software
memory_dump = yes => Enables creation of memory dump of the analysis machine
ip = 192.168.56.1 => Set the IP addresses of the guest machine for Cuckoo to communicate with.
Ctrl + S  to save

sudo gedit auxiliary.conf
sniffer enabled = yes => Enables the external use of the tcpdump sniffer 
Ctrl + S to save 

sudo gedit virtualbox.conf
virtualbox mode = gui => Specify VirtualBox to run in GUI mode (A window displaying the VM)
machines = cuckoo1 => Specifies the Virtual Machine to use as the target Guest VM
label = cuckoo1
platform = windows 
ip = 192.168.56.101 => Specify IP address of the VM for the Cuckoo Host to reach
snapshot = Cuckoo_Sandbox_Completed => Specify the snapshot name of a clean VM state. Used to revert changes after the analysis
Ctrl + S to save

sudo gedit processing.conf
[memory] 
enabled = yes =>  Another method of creating memory dump of the VM. Also enables Volatility to perform memory analysis, which will be shown in the report.
Ctrl + S to save

sudo gedit memory.conf => Volatility Configurations
basic guest_profile = Win7SP1x64 => Sets VM guest profile to avoid time wasted identifying it.
Ctrl + S to save 

If you are unsure of the Oerating system profile to use, you can get a full list of the supported profiles by running:

vol.py --info |grep Profiles -A48


sudo gedit reporting.conf
[singlefile]
enabled = yes
html = yes 
mongodb enabled = yes => Enables the mongoDB database for the collection and storage of analysis.
then Ctrl + X to exit , Y to save



STARTING CUCKOO

Once all configurations has been made, ensure that Windows 7 Guest machine is shutdown and reboot the Ubuntu Virtual Machine host

In a new terminal, ensure that the latest Cuckoo signatures and other supplies are downloaded from the 
Cuckoo Community, run the command:

cuckoo community 

Launch two terminals, the first terminal will be used to run and start Cuckoo:

cuckoo

In the second terminal, type the following to start the web server for the Cuckoo web interface

cuckoo web runserver 0.0.0.0:8080 
OR
cuckoo web --host 127.0.0.1 --port 8080

visit the Cuckoo Web Server via 127.0.0.1:8080 
